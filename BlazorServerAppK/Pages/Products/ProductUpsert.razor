@page "/product-list/create"
@page "/product-list/edit/{Id:int}"
@using ProjectK.Models
@using ProjectK.DataAccess.Repository.IRepository
@inject IUnitOfWork UnitOfWork
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@attribute [Authorize(Roles=ProjectK.Utility.SD.Role_Admin)]

<div class="row mt-2 mb-5">
    <h2 class="card-title text-info mb-3 ml-3">@Title Product</h2>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="@Product" OnValidSubmit="HandleProductUpsert">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label>Code</label>
                        <InputText @bind-Value="Product.Code" class="form-control"></InputText>
                    </div>
                    <div class="form-group">
                        <label>Name</label>
                        <InputText @bind-Value="Product.Name" class="form-control"></InputText>
                    </div>
                    <div class="form-group">
                        <label>Price</label>
                        <InputNumber @bind-Value="Product.Price" class="form-control"></InputNumber>
                    </div>
                    <div class="form-group">
                        <label>Availability</label>
                        <InputNumber @bind-Value="Product.Availability" class="form-control"></InputNumber>
                    </div>
                    <div class="form-group">
                        <button class="btn btn-primary">@Title Product</button>
                        <NavLink href="product-list" class="btn btn-secondary">Back to Index</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }
    public Product Product { get; set; } = new Product();
    public String Title { get; set; } = "Create";

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {

        var authenticationState = await AuthenticationState;
        if (!authenticationState.User.IsInRole(ProjectK.Utility.SD.Role_Admin))
        {
            var uri = new Uri(NavigationManager.Uri);
            NavigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}");
        }

        if (Id != null)
        {
            Title = "Update";
            Product = UnitOfWork.Product.GetFirstOrDefault(m => m.Id == Id);
        }
        else
        {
            Product = new Product();
        }
    }

    public async Task HandleProductUpsert()
    {
        try
        {
            if (Product.Id != 0 && Title == "Update")
            {
                UnitOfWork.Product.Update(Product);
                UnitOfWork.Save();
                NavigationManager.NavigateTo("product-list");
                JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Update Complete!");
            }
            else
            {
                UnitOfWork.Product.Add(Product);
                UnitOfWork.Save();
                NavigationManager.NavigateTo("product-list");
                JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Creation Complete!");
            }
        }
        catch (Exception e)
        {

        }

        NavigationManager.NavigateTo("product-list");

    }

}
