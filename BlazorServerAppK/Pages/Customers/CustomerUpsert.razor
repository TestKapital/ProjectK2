@page "/customer-list/create"
@page "/customer-list/edit/{Id:int}"
@using ProjectK.Models
@using ProjectK.DataAccess.Repository.IRepository
@using ProjectKapital.Models
@inject IUnitOfWork UnitOfWork
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@attribute [Authorize(Roles=ProjectK.Utility.SD.Role_Admin)]

<div class="row mt-2 mb-5">
    <h2 class="card-title text-info mb-3 ml-3">@Title Customer</h2>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="@Customer" OnValidSubmit="HandleCustomerUpsert">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label>First Name</label>
                        <InputText @bind-Value="Customer.FirstName" class="form-control"></InputText>
                    </div>
                    <div class="form-group">
                        <label>Last Name</label>
                        <InputText @bind-Value="Customer.LastName" class="form-control"></InputText>
                    </div>
                    <div class="form-group">
                        <label>Birthday</label>
                        <InputText @bind-Value="Customer.Birthday" type="date" class="form-control"></InputText>
                    </div>
                    <div class="form-group">
                        <label for="body">Gender</label>
                        <InputSelect @bind-Value="Customer.Gender" class="form-select">
                            @foreach (var gender in Enum.GetValues(typeof(Gender)))
                            {
                                <option value="@gender">@gender</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="form-group">
                        <label for="body">Customer Category</label>
                        <InputSelect @bind-Value="Customer.CustomerCategoryId" class="form-select">
                            @foreach (var category in GetCategories())
                            {
                                <option value="@category.Id">@category.CategoryName</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="form-group">
                        <label>Phone Number</label>
                        <InputText @bind-Value="Customer.PhoneNumber" class="form-control"></InputText>
                    </div>
                    <div class="form-group">
                        <label>Credit</label>
                        <InputNumber @bind-Value="Customer.Credit" class="form-control"></InputNumber>
                    </div>
                    <div class="form-group">
                        <button class="btn btn-primary">@Title Customer</button>
                        <NavLink href="customer-list" class="btn btn-secondary">Back to Index</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }
    public Customer Customer { get; set; } = new Customer();
    public String Title { get; set; } = "Create";

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {

        var authenticationState = await AuthenticationState;
        if (!authenticationState.User.IsInRole(ProjectK.Utility.SD.Role_Admin))
        {
            var uri = new Uri(NavigationManager.Uri);
            NavigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}");
        }

        if (Id != null)
        {
            Title = "Update";
            Customer = UnitOfWork.Customer.GetFirstOrDefault(m => m.Id == Id);
        }
        else
        {
            Customer = new Customer();
        }
    }

    public async Task HandleCustomerUpsert()
    {
        try
        {
            if (Customer.Id != 0 && Title == "Update")
            {
                UnitOfWork.Customer.Update(Customer);
                UnitOfWork.Save();
                NavigationManager.NavigateTo("customer-list");
                JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Update Complete!");
            }
            else
            {
                UnitOfWork.Customer.Add(Customer);
                UnitOfWork.Save();
                NavigationManager.NavigateTo("customer-list");
                JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Creation Complete!");
            }
        }
        catch (Exception e)
        {

        }

        NavigationManager.NavigateTo("customer-list");

    }

    public List<CustomerCategory> GetCategories()
    {
        return UnitOfWork.CustomerCategory.GetAll().ToList();

    }

}

